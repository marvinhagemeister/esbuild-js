import fs from "fs";
import path from "path";
import { Char } from "../src/lexer_helpers";

// prettier-ignore
const hex = new Set([
  "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
  "A", "B", "C", "D", "E", "F",
  "a", "b", "c", "d", "e", "f",
]);

const hexStart = new Set(["B", "b"]);

const regExp = new Set(["g", "i", "m", "s", "u", "y"]);

const whiteSpace = new Set([
	Char.Tab,
	Char.LineTab,
	Char.FormFeed,
	Char["\r"],
	Char.NewLine,
	Char["\u2028"],
	Char["\u2029"],
	Char.Space,
	Char.NoBreakSpace,
	Char.OghamSpaceMark,
	Char.EmSpace,
	Char.EmQuad,
	Char.EnSpace,
	Char.EnQuad,
]);

// prettier-ignore
const idStart = new Set([
  "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
  "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",

  "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
  "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",

  "$", "_"
]);

// prettier-ignore
const Numbers = new Set([
	"0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
	"_"
]);

let out = `// DO NOT EDIT
// This file is auto-generated by gen-char-table.ts

export const enum CharFlags {
	Unknown = 0,
	IdStart = 1 << 0,
	IdPart = 1 << 1,
	WhiteSpace = 1 << 2,
	WhiteSpaceOrLineTerminator = 1 << 3,
	Number = 1 << 4,
	Separator = 1 << 5,
	StringLiteralLineTerminator = 1 << 6,
	Hex = 1 << 7,
	OctHexBin = 1 << 8,
	RegExp = 1 << 9,
}

// DO NOT EDIT
// This file is auto-generated by gen-char-table.ts
// prettier-ignore

export const char2Flag = [
`;

for (let i = 0; i < 127; i++) {
	const n = String(i).padStart(3, " ");
	const ch = i >= 33 ? String.fromCharCode(i) : " ";

	let flags: string[] = [];
	if (idStart.has(ch)) {
		flags.push("CharFlags.IdStart", "CharFlags.IdPart");
	}

	if (Numbers.has(ch)) {
		flags.push("CharFlags.Number");
	}

	if (hex.has(ch)) {
		flags.push("CharFlags.Hex");
	}
	if (hexStart.has(ch)) {
		flags.push("CharFlags.OctHexBin");
	}

	if (flags.length === 0) {
		flags.push("CharFlags.Unknown");
	}

	if (ch === "_") {
		flags.push("CharFlags.Separator");
	} else {
		if (Numbers.has(ch)) {
			flags.push("CharFlags.IdPart");
		}
	}

	if (regExp.has(ch)) {
		flags.push("CharFlags.RegExp");
	}

	if (whiteSpace.has(i)) {
		flags.push("CharFlags.WhiteSpace");
	}

	out += `  /* ${n} - ${ch} */ ${flags.join(" | ")},\n`;
}

out += "]\n\n";

const file = path.join(__dirname, "..", "src", "lexer-ascii.ts");
fs.mkdirSync(path.dirname(file), { recursive: true });
fs.writeFileSync(file, out);
