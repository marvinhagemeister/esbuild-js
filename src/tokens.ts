// Note: Order is used for comparison
export const enum Token {
	Unknown,
	EndOfFile,
	SyntaxError,

	// TokenFlags
	BinaryExpression,
	UnaryExpression,
	AssignOp,
	Literal,
	UpdateExpression,

	/** #!/usr/bin/env node */
	Hashbang,

	// Literals
	NoSubstitutionTemplateLiteral,
	NumericLiteral,
	StringLiteral,
	BigIntLiteral,

	// Pseudo literals
	TemplateMiddle,
	TemplateHead,
	TemplateTail,

	// Assignment
	Identifier,
	IdentifierOrKeyword,
	EscapedKeyword,

	// Special Punctuation (Must be synced with char codes)
	CloseParen = 41,
	Comma = 44,
	Colon = 58,
	SemiColon = 59,
	At = 64,
	OpenBracket = 91,
	CloseBracket = 93,
	OpenBrace = 123,
	CloseBrace = 125,
	OpenParen = 40,
	Tilde = 126,

	// Keywords
	Break,
	Case,
	Catch,
	Class,
	Const,
	Continue,
	Debugger,
	Default,
	Delete,
	Do,
	Else,
	Enum,
	Export,
	Extends,
	False,
	Finally,
	For,
	Function,
	If,
	Import,
	In,
	Instanceof,
	New,
	Null,
	Return,
	Super,
	Switch,
	This,
	Throw,
	True,
	Try,
	Typeof,
	Var,
	Void,
	While,
	With,
	Implements,
	Interface,
	Package,
	Private,
	Protected,
	Public,
	Static,
	Yield,

	// Punctuation (unsynched)
	"!==",
	"!=",
	"!",
	DotDotDot,
	Dot,
	"/",
	"/=",
	"+=",
	"++",
	Plus,
	"**=",
	"**",
	"*",
	"*=",
	"=>",
	"===",
	"==",
	Equals,
	"<",
	"<=",
	"<<=",
	"<<",
	">=",
	GreaterThanGreaterThanEquals,
	">>=",
	">>>",
	">>",
	">",
	PercentEquals,
	Percent,
	"&=",
	"&&=",
	"&&",
	Ampersand,
	"|=",
	"||=",
	"||",
	Bar,
	"^=",
	Caret,
	"-=",
	"--",
	Minus,
	"??=",
	"??",
	Question,
	QuestionDot,
}

// Note: Order is used for comparison
export const enum TokenFlags {
	Unknown = Token.Unknown,
	EndOfFile = Token.EndOfFile,
	SyntaxError = Token.SyntaxError,

	/** #!/usr/bin/env node */
	Hashbang = Token.Hashbang,

	// Literals
	NoSubstitutionTemplateLiteral = Token.NoSubstitutionTemplateLiteral,
	NumericLiteral = Token.NumericLiteral | Token.Literal,
	StringLiteral = Token.StringLiteral,
	BigIntLiteral = Token.BigIntLiteral,

	// Pseudo literals
	TemplateMiddle = Token.TemplateMiddle,
	TemplateHead = Token.TemplateHead,
	TemplateTail = Token.TemplateTail,

	// Assignment
	Identifier = Token.Identifier,
	IdentifierOrKeyword = Token.IdentifierOrKeyword,
	EscapedKeyword = Token.EscapedKeyword,

	// Special Punctuation (Must be synced with char codes)
	CloseParen = Token.CloseParen,
	Comma = Token.Comma,
	Colon = Token.Colon,
	SemiColon = Token.SemiColon,
	At = Token.At,
	OpenBracket = Token.OpenBracket,
	CloseBracket = Token.CloseBracket,
	OpenBrace = Token.OpenBrace,
	CloseBrace = Token.CloseBrace,
	OpenParen = Token.OpenParen,
	Tilde = Token.Tilde | Token.UnaryExpression,

	// Keywords
	Break,
	Case,
	Catch,
	Class,
	Const,
	Continue,
	Debugger,
	Default,
	Delete = Token.Delete | Token.UnaryExpression,
	Do,
	Else,
	Enum,
	Export,
	Extends,
	False = Token.False | Token.Literal,
	Finally,
	For,
	Function,
	If,
	Import,
	In,
	Instanceof,
	New,
	Null = Token.Null | Token.Literal,
	Return,
	Super,
	Switch,
	This,
	Throw,
	True = Token.False | Token.Literal,
	Try,
	Typeof = Token.Typeof | Token.UnaryExpression,
	Var,
	Void = Token.Void | Token.UnaryExpression,
	While,
	With,
	Implements,
	Interface,
	Package,
	Private,
	Protected,
	Public,
	Static,
	Yield,

	// Punctuation (unsynched)
	"!==",
	"!=",
	"!" = Token["!"] | Token.UnaryExpression,
	DotDotDot,
	Dot,
	"/",
	"/=" = Token["/="] | Token.AssignOp | Token.BinaryExpression,
	"+=" = Token["+="] | Token.AssignOp | Token.BinaryExpression,
	"++" = Token["++"] |
		Token.AssignOp |
		Token.BinaryExpression |
		Token.UpdateExpression,
	Plus = Token.Plus | Token.UnaryExpression,
	"**=",
	"**",
	"*",
	"*=" = Token["*="] | Token.AssignOp | Token.BinaryExpression,
	"=>",
	"===",
	"==",
	Equals = Token.Equals | Token.AssignOp,
	"<",
	"<=",
	"<<=" = Token["<<="] | Token.AssignOp | Token.BinaryExpression,
	"<<",
	">=",
	GreaterThanGreaterThanEquals,
	">>=",
	">>>",
	">>",
	">",
	PercentEquals,
	Percent,
	"&=",
	"&&=",
	"&&",
	Ampersand,
	"|=",
	"||=",
	"||",
	Bar,
	"^=",
	Caret,
	"-=",
	"--" = Token["--"] | Token.UpdateExpression,
	Minus = Token.Minus | Token.UnaryExpression,
	"??=",
	"??",
	Question,
	QuestionDot,
}

export const keywords = {
	// Reserved words
	break: Token.Break,
	case: Token.Case,
	catch: Token.Catch,
	class: Token.Class,
	const: Token.Const,
	continue: Token.Continue,
	debugger: Token.Debugger,
	default: Token.Default,
	delete: Token.Delete,
	do: Token.Do,
	else: Token.Else,
	enum: Token.Enum,
	export: Token.Export,
	extends: Token.Extends,
	false: Token.False,
	finally: Token.Finally,
	for: Token.For,
	function: Token.Function,
	if: Token.If,
	import: Token.Import,
	in: Token.In,
	instanceof: Token.Instanceof,
	new: Token.New,
	null: Token.Null,
	return: Token.Return,
	super: Token.Super,
	switch: Token.Switch,
	this: Token.This,
	throw: Token.Throw,
	true: Token.True,
	try: Token.Try,
	typeof: Token.Typeof,
	var: Token.Var,
	void: Token.Void,
	while: Token.While,
	with: Token.With,
	//Strict mode reserved words
	implements: Token.Implements,
	interface: Token.Interface,
	package: Token.Package,
	private: Token.Private,
	protected: Token.Protected,
	public: Token.Public,
	static: Token.Static,
	yield: Token.Yield,
};
