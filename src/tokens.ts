// Note: Order is used for comparison
export const enum Token {
	/** Used to "reset" flags */
	FlagSpace = 0xff,

	// TokenFlags
	BinaryExpression = 1 << 12,
	UnaryExpression = 1 << 13,
	AssignOp = 1 << 14,
	Literal = 1 << 15,
	UpdateExpression = 1 << 16,

	// Real tokens begin here
	Unknown = 0,
	EndOfFile = 1,
	SyntaxError = 2,

	/** #!/usr/bin/env node */
	Hashbang = 3,

	// Literals
	NoSubstitutionTemplateLiteral = 4,
	NumericLiteral = 5 | Literal,
	StringLiteral = 6 | Literal,
	BigIntLiteral = 7 | Literal,

	// Pseudo literals
	TemplateMiddle = 8,
	TemplateHead = 9,
	TemplateTail = 10,

	// Assignment
	Identifier = 11,
	IdentifierOrKeyword = 12,
	EscapedKeyword = 13,

	// Special Punctuation
	CloseParen = 14,
	Comma = 15,
	Colon = 16,
	SemiColon = 17,
	At = 18,
	OpenBracket = 19,
	CloseBracket = 20,
	OpenBrace = 21,
	CloseBrace = 22,
	OpenParen = 23,
	Tilde = 24 | UnaryExpression,

	// Keywords
	Break = 25,
	Case = 26,
	Catch = 27,
	Class = 28,
	Const = 29,
	Continue = 30,
	Debugger = 31,
	Default = 32,
	Delete = 33 | UnaryExpression,
	Do = 34,
	Else = 35,
	Enum = 36,
	Export = 37,
	Extends = 38,
	False = 39 | Literal,
	Finally = 40,
	For = 41,
	Function = 42,
	If = 43,
	Import = 44,
	In = 45,
	Instanceof = 46,
	New = 47,
	Null = 48 | Literal,
	Return = 49,
	Super = 50,
	Switch = 51,
	This = 52,
	Throw = 53,
	True = 54 | Literal,
	Try = 55,
	Typeof = 56 | UnaryExpression,
	Var = 57,
	Void = 58 | UnaryExpression,
	While = 59,
	With = 60,
	Implements = 61,
	Interface = 62,
	Package = 63,
	Private = 64,
	Protected = 65,
	Public = 66,
	Static = 67,
	Yield = 68,

	// Punctuation (unsynched)
	"!==" = 69,
	"!=" = 70,
	"!" = 71 | UnaryExpression,
	"..." = 72,
	"." = 73,
	"/" = 74,
	"/=" = 75 | AssignOp | BinaryExpression,
	"+=" = 76 | AssignOp | BinaryExpression,
	"++" = 77 | AssignOp | BinaryExpression | UpdateExpression,
	"+" = 78 | UnaryExpression,
	"**=" = 79,
	"**" = 80,
	"*" = 81,
	"*=" = 82 | AssignOp | BinaryExpression,
	"===" = 83 | BinaryExpression,
	"==" = 84 | BinaryExpression,
	"=>" = 85,
	"=" = 86 | AssignOp,
	"<" = 87,
	"<=" = 88,
	"<<=" = 89 | AssignOp | BinaryExpression,
	"<<" = 90,
	">=" = 91,
	">>=" = 92,
	">>>" = 93,
	">>" = 94,
	">" = 95,
	"%=" = 96,
	"%" = 97,
	"&=" = 98,
	"&&=" = 99,
	"&&" = 100,
	"&" = 101,
	"|=" = 102,
	"||=" = 103,
	"||" = 104,
	"|" = 105,
	"^=" = 106,
	"^" = 107,
	"-=" = 108,
	"--" = 109 | UpdateExpression,
	"-" = 110 | UnaryExpression,
	"??=" = 111,
	"??" = 112,
	"?" = 113,
	"?." = 114,
}
export const keywordTable = [
	"unknown",
	"end of file",
	"SyntaxError",

	/** #!/usr/bin/env node */
	"Hashbang",

	// Literals
	"template something",
	"number",
	"string",
	"bigint",

	// Pseudo literals
	"TemplateMiddle",
	"TemplateHead",
	"TemplateTail",

	// Assignment
	"identifier",
	"IdentifierOrKeyword",
	"EscapedKeyword",

	// Special Punctuation
	")",
	",",
	":",
	";",
	"@",
	"[",
	"]",
	"{",
	"}",
	"(",
	"~",

	// Keywords
	"break",
	"case",
	"catch",
	"class",
	"const",
	"continue",
	"debugger",
	"default",
	"delete",
	"do",
	"else",
	"enum",
	"export",
	"extends",
	"false",
	"finally",
	"for",
	"function",
	"if",
	"import",
	"in",
	"instanceof",
	"new",
	"null",
	"return",
	"super",
	"switch",
	"this",
	"throw",
	"true",
	"try",
	"typeof",
	"var",
	"void",
	"while",
	"with",
	"implements",
	"interface",
	"package",
	"private",
	"protected",
	"public",
	"static",
	"yield",

	// Punctuation (unsynched)
	"!==",
	"!=",
	"!",
	"...",
	".",
	"/",
	"/=",
	"+=",
	"++",
	"+",
	"**=",
	"**",
	"*",
	"*=",
	"===",
	"==",
	"=>",
	"=",
	"<",
	"<=",
	"<<=",
	"<<",
	">=",
	">>=",
	">>>",
	">>",
	">",
	"%=",
	"%",
	"&=",
	"&&=",
	"&&",
	"&",
	"|=",
	"||=",
	"||",
	"|",
	"^=",
	"^",
	"-=",
	"--",
	"-",
	"??=",
	"??",
	"?",
];

export const keywords = {
	// Reserved words
	break: Token.Break,
	case: Token.Case,
	catch: Token.Catch,
	class: Token.Class,
	const: Token.Const,
	continue: Token.Continue,
	debugger: Token.Debugger,
	default: Token.Default,
	delete: Token.Delete,
	do: Token.Do,
	else: Token.Else,
	enum: Token.Enum,
	export: Token.Export,
	extends: Token.Extends,
	false: Token.False,
	finally: Token.Finally,
	for: Token.For,
	function: Token.Function,
	if: Token.If,
	import: Token.Import,
	in: Token.In,
	instanceof: Token.Instanceof,
	new: Token.New,
	null: Token.Null,
	return: Token.Return,
	super: Token.Super,
	switch: Token.Switch,
	this: Token.This,
	throw: Token.Throw,
	true: Token.True,
	try: Token.Try,
	typeof: Token.Typeof,
	var: Token.Var,
	void: Token.Void,
	while: Token.While,
	with: Token.With,
	//Strict mode reserved words
	implements: Token.Implements,
	interface: Token.Interface,
	package: Token.Package,
	private: Token.Private,
	protected: Token.Protected,
	public: Token.Public,
	static: Token.Static,
	yield: Token.Yield,
};
